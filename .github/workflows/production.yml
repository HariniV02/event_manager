name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10] # Use a stable Python version
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d myappdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@127.0.0.1:5432/myappdb # Use localhost for Postgres
        run: |
          python --version
          pytest

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/event_manager:${{ github.sha }}
          platforms: linux/amd64,linux/arm64 # Multi-platform builds
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/event_manager:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/event_manager:${{ github.sha }}
          format: 'table'
          exit-code: 1 # Fail the job if vulnerabilities are found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
